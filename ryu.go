// Copyright 2018 Ulf Adams
// Modifications copyright 2019 Caleb Spare
//
// The contents of this file may be used under the terms of the Apache License,
// Version 2.0.
//
//    (See accompanying file LICENSE or copy at
//     http://www.apache.org/licenses/LICENSE-2.0)
//
// Unless required by applicable law or agreed to in writing, this software
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.
//
// The code in this file is part of a Go translation of the C code written by
// Ulf Adams which may be found at https://github.com/ulfjack/ryu. That source
// code is licensed under Apache 2.0 and this code is derivative work thereof.

package ryu

import (
	"math"
	"reflect"
	"unsafe"
)

//go:generate go run maketables.go

// FormatFloat32 converts a 32-bit floating point number f to a string.
// It behaves like strconv.FormatFloat(float64(f), 'e', -1, 32).
func FormatFloat32(f float32) string {
	b := make([]byte, 0, 16)
	b = AppendFloat32(b, f)

	// Convert the output to a string without copying.
	var s string
	sh := (*reflect.StringHeader)(unsafe.Pointer(&s))
	sh.Data = uintptr(unsafe.Pointer(&b[0]))
	sh.Len = len(b)
	return s
}

// AppendFloat32 appends the string form of the 32-bit floating point number f,
// as generated by FormatFlot32, to b and returns the extended buffer.
func AppendFloat32(b []byte, f float32) []byte {
	// Step 1: Decode the floating-point number.
	// Unify normalized and subnormal cases.
	u := math.Float32bits(f)
	neg := u>>(mantBits32+expBits32) != 0
	mant := u & (uint32(1)<<mantBits32 - 1)
	exp := (u >> mantBits32) & (uint32(1)<<expBits32 - 1)

	// Exit early for easy cases.
	if exp == uint32(1)<<expBits32-1 || (exp == 0 && mant == 0) {
		return appendSpecial(b, neg, exp == 0, mant == 0)
	}

	d := float32ToDecimal(mant, exp)
	return d.append(b, neg)
}

func appendSpecial(b []byte, neg, expZero, mantZero bool) []byte {
	if !mantZero {
		return append(b, "NaN"...)
	}
	if neg {
		b = append(b, '-')
	}
	if !expZero {
		return append(b, "Infinity"...)
	}
	return append(b, "0e+00"...)
}

func assert(t bool, msg string) {
	if !t {
		panic(msg)
	}
}
