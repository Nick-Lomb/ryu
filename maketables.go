// Copyright 2018 Ulf Adams
// Modifications copyright 2019 Caleb Spare
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// The code in this file is a Go translation of the Java code written by
// Ulf Adams which may be found at
//
//     https://github.com/ulfjack/ryu/analysis/PrintFloatLookupTable.java
//
// That source code is licensed under Apache 2.0 and this code is derivative
// work thereof.

// +build ignore

// This program generates tables.go.

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"math/big"
)

var header = []byte(`// Code generated by running "go generate". DO NOT EDIT.

// Copyright 2018 Ulf Adams
// Modifications copyright 2019 Caleb Spare
//
// The contents of this file may be used under the terms of the Apache License,
// Version 2.0.
//
//    (See accompanying file LICENSE or copy at
//     http://www.apache.org/licenses/LICENSE-2.0)
//
// Unless required by applicable law or agreed to in writing, this software
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.
//
// The code in this file is part of a Go translation of the C code written by
// Ulf Adams which may be found at https://github.com/ulfjack/ryu. That source
// code is licensed under Apache 2.0 and this code is derivative work thereof.

package ryu

`)

const (
	posTableSize   = 47
	invTableSize   = 31
	pow5NumBits    = 61 // max 63
	pow5InvNumBits = 59 // max 63
)

func main() {
	b := bytes.NewBuffer(header)

	fmt.Fprintf(b, "const pow5NumBits = %d\n", pow5NumBits)
	fmt.Fprintln(b, "var pow5Split = [...]uint64{")
	for i := 0; i < posTableSize; i++ {
		pow5 := big.NewInt(5)
		pow5.Exp(pow5, big.NewInt(int64(i)), nil)
		shift := pow5.BitLen() - pow5NumBits
		rsh(pow5, shift)
		fmt.Fprintf(b, "%d,", pow5.Uint64())
		if i%4 == 3 {
			fmt.Fprintln(b)
		}
	}
	fmt.Fprintln(b, "\n}")

	fmt.Fprintf(b, "const pow5InvNumBits = %d\n", pow5InvNumBits)
	fmt.Fprintln(b, "var pow5InvSplit = [...]uint64{")
	for i := 0; i < invTableSize; i++ {
		pow5 := big.NewInt(5)
		pow5.Exp(pow5, big.NewInt(int64(i)), nil)
		shift := pow5.BitLen() - 1 + pow5InvNumBits
		pow5Inv := big.NewInt(1)
		rsh(pow5Inv, -shift)
		pow5Inv.Quo(pow5Inv, pow5)
		pow5Inv.Add(pow5Inv, big.NewInt(1))
		fmt.Fprintf(b, "%d,", pow5Inv.Uint64())
		if i%4 == 3 {
			fmt.Fprintln(b)
		}
	}
	fmt.Fprintln(b, "\n}")

	text, err := format.Source(b.Bytes())
	if err != nil {
		log.Fatal(err)
	}
	if err := ioutil.WriteFile("tables.go", text, 0644); err != nil {
		log.Fatal(err)
	}
}

func rsh(x *big.Int, n int) {
	if n < 0 {
		x.Lsh(x, uint(-n))
	} else {
		x.Rsh(x, uint(n))
	}
}
